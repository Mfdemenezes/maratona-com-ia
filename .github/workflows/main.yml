name: CI-CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Install dependencies
        working-directory: ./src
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        working-directory: ./src
        run: |
          python -m pytest tests/ -v

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src
          file: ./src/Dockerfile
          push: true
          tags: |
            mfdemenezes/maratona-com-ia:latest
            mfdemenezes/maratona-com-ia:v${{ github.run_number }}

  Deploy-Infrastructure:
    runs-on: ubuntu-latest
    needs: [CI]
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply tfplan

      - name: Get RDS Endpoint
        id: rds
        run: |
          RDS_ENDPOINT=$(terraform output -json db_instance_endpoints | jq -r '.[0]')
          echo "rds_endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name encontros-tech-cluster --region us-east-1

      - name: Get Terraform Outputs
        id: terraform
        run: |
          echo "project_name=$(terraform output -raw project_name)" >> $GITHUB_OUTPUT
          echo "environment=$(terraform output -raw environment)" >> $GITHUB_OUTPUT
          echo "app_image=$(terraform output -raw app_image)" >> $GITHUB_OUTPUT
          echo "app_replicas=$(terraform output -raw app_replicas)" >> $GITHUB_OUTPUT
          echo "app_cpu_request=$(terraform output -raw app_cpu_request)" >> $GITHUB_OUTPUT
          echo "app_memory_request=$(terraform output -raw app_memory_request)" >> $GITHUB_OUTPUT
          echo "app_cpu_limit=$(terraform output -raw app_cpu_limit)" >> $GITHUB_OUTPUT
          echo "app_memory_limit=$(terraform output -raw app_memory_limit)" >> $GITHUB_OUTPUT
          echo "db_username=$(terraform output -raw db_username)" >> $GITHUB_OUTPUT
          echo "db_name=$(terraform output -json db_instance_names | jq -r '.[0]')" >> $GITHUB_OUTPUT

      - name: Create database secret
        run: |
          kubectl create secret generic database-secret \
            --from-literal=database-url="postgresql://${{ steps.terraform.outputs.db_username }}:Mfm38111@${{ steps.rds.outputs.rds_endpoint }}/${{ steps.terraform.outputs.db_name }}?sslmode=require" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Generate Kubernetes manifests
        run: |
          # Export variables for envsubst
          export PROJECT_NAME=${{ steps.terraform.outputs.project_name }}
          export ENVIRONMENT=${{ steps.terraform.outputs.environment }}
          export APP_IMAGE=${{ steps.terraform.outputs.app_image }}
          export APP_REPLICAS=${{ steps.terraform.outputs.app_replicas }}
          export APP_CPU_REQUEST=${{ steps.terraform.outputs.app_cpu_request }}
          export APP_MEMORY_REQUEST=${{ steps.terraform.outputs.app_memory_request }}
          export APP_CPU_LIMIT=${{ steps.terraform.outputs.app_cpu_limit }}
          export APP_MEMORY_LIMIT=${{ steps.terraform.outputs.app_memory_limit }}

          # Generate deployment from template
          envsubst < ../k8s/deployment-template.yaml > /tmp/deployment.yaml

      - name: Deploy to EKS
        run: |
          kubectl apply -f ../k8s/service-account.yaml
          kubectl apply -f /tmp/deployment.yaml
          kubectl rollout restart deployment/${{ steps.terraform.outputs.project_name }}
          kubectl rollout status deployment/${{ steps.terraform.outputs.project_name }}

      - name: Verify deployment
        run: |
          kubectl get pods
          kubectl get services
          echo "LoadBalancer URL:"
          kubectl get service encontros-tech -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'

  Destroy-Infrastructure:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init

      - name: Update kubeconfig (if cluster exists)
        continue-on-error: true
        run: aws eks update-kubeconfig --name encontros-tech-cluster --region us-east-1

      - name: Delete Kubernetes resources (if cluster exists)
        continue-on-error: true
        run: kubectl delete -f ../k8s/ --ignore-not-found=true

      - name: Terraform Destroy
        run: terraform destroy -auto-approve